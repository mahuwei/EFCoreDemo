// <auto-generated />
using System;
using EFCoreDemo.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCoreDemo.Migrations
{
    [DbContext(typeof(ContextDemo))]
    [Migration("20201218070842_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("EFCoreDemo.Entities.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ChangeNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Memo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.Property<string>("No")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("EFCoreDemo.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ChangeNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Memo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("WorkNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EFCoreDemo.Entities.Business", b =>
                {
                    b.OwnsOne("EFCoreDemo.Entities.StreetAddress", "StreetAddress", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("ChangeNumber")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                            b1.Property<string>("Street")
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.Navigation("StreetAddress");
                });

            modelBuilder.Entity("EFCoreDemo.Entities.Employee", b =>
                {
                    b.HasOne("EFCoreDemo.Entities.Business", null)
                        .WithMany("Employees")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EFCoreDemo.Entities.StreetAddress", "StreetAddress", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("ChangeNumber")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                            b1.Property<string>("Street")
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("StreetAddress");
                });

            modelBuilder.Entity("EFCoreDemo.Entities.Business", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
